-- Create vector extension
create extension vector
  with schema extensions;

-- Create documents table with proper embedding size
create table documents (
  id bigint primary key generated always as identity,
  content text,
  embedding vector(384)  -- Changed to 384 for 'all-MiniLM-L6-v2' model output dimension
);

-- Add tsvector column for full-text search
alter table documents add column fts tsvector 
  generated always as (to_tsvector('english', content)) stored;

-- Create an index for the full-text search
create index on documents using gin(fts);

-- Create an index for the semantic vector search
create index on documents using hnsw (embedding vector_ip_ops);

-- Match documents using cosine distance (<=>)
create or replace function match_documents (
  query_embedding vector(384),  -- Changed to 384 dimensions
  match_threshold float,
  match_count int
)
returns table (id bigint, content text, embedding vector(384), cosine_distance float)  -- Updated return type
language sql
as $$
  select id, content, embedding, embedding <=> query_embedding as cosine_distance
  from documents
  where embedding <=> query_embedding < 1 - match_threshold
  order by cosine_distance asc
  limit least(match_count, 200);
$$;

-- Hybrid search function with updated dimension and full-text handling
create or replace function hybrid_search(
  query_text text,
  query_embedding vector(384),  -- Changed to 384 dimensions
  match_count int,
  full_text_weight float = 1,
  semantic_weight float = 1,
  rrf_k int = 50
)
returns table (id bigint, content text)  -- Updated return type
language sql
as $$
with full_text as (
  select
    id,
    row_number() over(order by ts_rank_cd(fts, to_tsquery('english', regexp_replace(query_text, '\s+', ' & ', 'g'))) desc) as rank_ix
  from
    documents
  where
    fts @@ to_tsquery('english', regexp_replace(query_text, '\s+', ' & ', 'g'))
  order by rank_ix
  limit least(match_count, 30) * 2
),
semantic as (
  select
    id,
    row_number() over (order by embedding <=> query_embedding) as rank_ix
  from
    documents
  order by rank_ix
  limit least(match_count, 30) * 2
)
select
  documents.id,
  documents.content
from
  full_text
  full outer join semantic
    on full_text.id = semantic.id
  join documents
    on coalesce(full_text.id, semantic.id) = documents.id
order by
  coalesce(1.0 / (rrf_k + full_text.rank_ix), 0.0) * full_text_weight +
  coalesce(1.0 / (rrf_k + semantic.rank_ix), 0.0) * semantic_weight
  desc
limit
  least(match_count, 30)
$$;
